---
const params = Astro.url.searchParams;

const state = params.get("state");
const code = params.get("code");

let spotifyToken = Astro.cookies.get("token")?.value;

if (!state && spotifyToken === undefined) {
	// redirect to login page
	return Astro.redirect(`/`);
}

if (state && code) {
	const response = await fetch("https://accounts.spotify.com/api/token", {
		method: "POST",
		headers: {
			"Content-Type": "application/x-www-form-urlencoded",
			Authorization: `Basic ${Buffer.from(`${import.meta.env.SPOTIFY_CLIENT_ID}:${import.meta.env.SPOTIFY_CLIENT_SECRET}`).toString("base64")}`,
		},
		body: new URLSearchParams({
			code: code!,
			redirect_uri: Astro.url.origin + "/view",
			grant_type: "authorization_code",
		}),
	});

	const data = await response.json();

	if (!data.access_token) {
		// redirect to login page
		return Astro.redirect(`/`);
	}

	spotifyToken = data.access_token;

	// save token to local storage
	Astro.cookies.set("token", spotifyToken!, {
		httpOnly: true,
		secure: true,
	});
}

const allTracks = [];
const segments = 5;
for (let i = 0; i < segments; i++) {
	const topTracks = await fetch(
		`https://api.spotify.com/v1/me/top/tracks?limit=${30 - i * 5}&offset=${i * 30}`,
		{
			headers: {
				Authorization: `Bearer ${spotifyToken}`,
			},
		}
	).then((response) => response.json());

	allTracks.push(topTracks.items);
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />

		<script is:inline src="https://aframe.io/releases/1.6.0/aframe.min.js"
		></script>

		<title>Spotify View</title>
	</head>
	<body>
		<a-scene>
			{
				allTracks.map((tracks, topTracksIndex) => {
					return tracks.map((track: any, index: number) => {
						const theta = (index / tracks.length) * 2 * Math.PI;
						const radius = (2 * tracks.length) / 10; // Adjust this value to control circle size

						const x = radius * Math.cos(theta);
						const y = 1.5 - topTracksIndex * 0.3; // Adjust this value if you need the images to be at a different height
						const z = radius * Math.sin(theta);

						// Calculate the yaw and pitch to face the center (0, 0, 0)
						const direction = [0 - x, 0 - y, 0 - z];
						const magnitude = Math.sqrt(
							direction[0] ** 2 + direction[1] ** 2 + direction[2] ** 2
						);
						const directionNorm = direction.map((d) => d / magnitude);

						const [d_x, d_y, d_z] = directionNorm;
						const yaw = Math.atan2(d_x, d_z);
						const pitch = Math.atan2(d_y, Math.sqrt(d_x ** 2 + d_z ** 2));
						const roll = 0;

						const yawDegrees = yaw * (180 / Math.PI);
						const pitchDegrees = pitch * (180 / Math.PI);

						return (
							<a-image
								id={`track${index}`}
								key={track.id}
								position={`${x} ${y} ${z}`}
								rotation={`${pitchDegrees} ${yawDegrees} ${roll}`}
								src={track.album.images[0].url}
								color="#4CC3D9"
							/>
						);
					});
				})
			}
			<a-sky color="#3b3c47"></a-sky>
			<a-camera>
				<a-cursor></a-cursor>
			</a-camera>
		</a-scene>
	</body>
</html>
